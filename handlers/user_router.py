from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from create_bot import bot, admins
from db_handler.db_funk import get_user_data, insert_user
from keyboards.kbs import main_kb, home_page_kb

user_router = Router()

universe_text = ('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª '
                 '–∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /profile –∏–∑ –º–µ–Ω—é.')


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
@user_router.message(CommandStart())
async def cmd_start(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)

    if user_info:
        response_text = f'{message.from_user.full_name}, –≤–∏–∂—É, —á—Ç–æ –≤—ã —É–∂–µ –≤ –±–∞–∑–µ. {universe_text}'
    else:
        await insert_user(user_data={
            'user_id': message.from_user.id,
            'full_name': message.from_user.full_name,
            'user_login': message.from_user.username,
        })
        response_text = (f'{message.from_user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. '
                         f'{universe_text}')

    await message.answer(text=response_text, reply_markup=main_kb(message.from_user.id))



# –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(Command('profile'))
@user_router.message(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
async def get_profile(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        if not user_info:
            await message.answer('–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.')
            return

        text = (f'üëâ –¢–µ–ª–µ–≥—Ä–∞–º ID: <code><b>{user_info.get("user_id")}</b></code>\n'
                f'üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user_info.get("full_name") or "-"}\n'
                f'üîë –õ–æ–≥–∏–Ω: {("@" + user_info.get("user_login")) if user_info.get("user_login") else "-"}\n'
                f'üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_info.get("date_reg")}')

    await message.answer(text, reply_markup=home_page_kb(message.from_user.id))



# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@user_router.message(F.text.contains('–ù–∞–∑–∞–¥'))
async def go_home(message: Message):
    await message.answer(f'{message.from_user.first_name}, {universe_text}', reply_markup=main_kb(message.from_user.id))


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–∏ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω)
@user_router.message(Command("help"))
async def cmd_help(message: Message):
    is_admin = message.from_user.id in admins

    text = (
        "üÜò –ü–æ–º–æ—â—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "‚Ä¢ /profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
    )
    if is_admin:
        text += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚Ä¢ /broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞"

    await message.answer(text, reply_markup=main_kb(message.from_user.id))
